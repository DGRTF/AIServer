{"version":3,"sources":["Components/PaintBoard/PaintBoard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PaintBoard","props","canvas","ctx","paint","state","numberResponse","className","width","height","onMouseDown","this","canvas_mousedown","bind","onMouseMove","canvas_mousemove","onMouseOut","canvas_mouseout","onMouseUp","canvas_mouseup","onClick","sendCanvas","ev","target","getContext","beginPath","coordinate","getBoundingClientRect","resultX","clientX","left","resultY","clientY","top","moveTo","lineWidth","strokeStyle","lineTo","stroke","endDriving","closePath","button","disabled","Promise","resolve","toBlob","blob","formData","FormData","append","file","fetch","method","headers","body","finally","response","json","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAOqBA,G,wDACnB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IA0BAC,YA3BgB,IA6BhBC,SA7BgB,IA+BhBC,WA/BgB,EAEtB,EAAKC,MAAQ,CACXC,eAAgB,MAHI,E,qDAOtB,OACE,6BACE,4BACEC,UAAU,sBACVC,MAAM,MACNC,OAAO,MACPC,YAAaC,KAAKC,iBAAiBC,KAAKF,MACxCG,YAAaH,KAAKI,iBAAiBF,KAAKF,MACxCK,WAAYL,KAAKM,gBAAgBJ,KAAKF,MACtCO,UAAWP,KAAKQ,eAAeN,KAAKF,QAGtC,4BACES,QAAST,KAAKU,WAAWR,KAAKF,OADhC,0DAGA,6BAAMA,KAAKN,MAAMC,eAAiBK,KAAKN,MAAMC,eAAiB,O,uCAW3CgB,GACvBX,KAAKT,OAASoB,EAAGC,OACjBZ,KAAKP,OAAQ,EACbO,KAAKR,IAAMQ,KAAKT,OAAOsB,WAAW,MAClCb,KAAKR,IAAIsB,YACT,IAAMC,EAAaf,KAAKT,OAAOyB,wBACzBC,EAAUN,EAAGO,QAAUH,EAAWI,KAAO,EACzCC,EAAUT,EAAGU,QAAUN,EAAWO,IAAM,EAC9CtB,KAAKR,IAAI+B,OAAON,EAASG,GACzBpB,KAAKR,IAAIgC,UAAY,GACrBxB,KAAKR,IAAIiC,YAAc,U,uCAGAd,GACvB,GAAIX,KAAKP,MAAO,CACd,IAAMsB,EAAaf,KAAKT,OAAOyB,wBACzBC,EAAUN,EAAGO,QAAUH,EAAWI,KAAO,EACzCC,EAAUT,EAAGU,QAAUN,EAAWO,IAAM,EAC9CtB,KAAKR,IAAIkC,OAAOT,EAASG,GACzBpB,KAAKR,IAAImC,Y,uCAKX3B,KAAK4B,e,wCAID5B,KAAKR,KACPQ,KAAK4B,e,mCAKP5B,KAAKP,OAAQ,EACbO,KAAKR,IAAIqC,c,0EAGclB,G,wFACnBX,KAAKT,O,wBACDuC,EAASnB,EAAGC,QACXmB,UAAW,E,SACC,IAAIC,SAAc,SAAAC,GAAO,OAAI,EAAK1C,OAAO2C,OAAOD,EAAS,iB,cAAtEE,E,QACAC,EAAW,IAAIC,UACZC,OAAO,OAAQH,GACZ,CACVI,KAAMJ,G,UAEeK,MAAM,yBAA0B,CACrDC,OAAQ,OACRC,QAAS,GAITC,KAAMP,IAELQ,SAAQ,WACPd,EAAOC,UAAW,K,eAThBc,E,YAYN7C,K,UACwB6C,EAASC,O,0BAA/BnD,e,WADGoD,S,6HA9F6BC,cCMzBC,MARf,WACE,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,QCIcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.50c06e76.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './PaintBoard.scss';\r\n\r\ninterface IPaintBoardState {\r\n  numberResponse: number;\r\n}\r\n\r\nexport default class PaintBoard extends Component<{}, IPaintBoardState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      numberResponse: null\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <canvas\r\n          className='paint-board__canvas'\r\n          width='400'\r\n          height='400'\r\n          onMouseDown={this.canvas_mousedown.bind(this)}\r\n          onMouseMove={this.canvas_mousemove.bind(this)}\r\n          onMouseOut={this.canvas_mouseout.bind(this)}\r\n          onMouseUp={this.canvas_mouseup.bind(this)}\r\n        >\r\n        </canvas>\r\n        <button\r\n          onClick={this.sendCanvas.bind(this)}\r\n        >Отправить</button>\r\n        <div>{this.state.numberResponse ? this.state.numberResponse : \"\"}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  private canvas: HTMLCanvasElement;\r\n\r\n  private ctx: CanvasRenderingContext2D;\r\n\r\n  private paint: boolean;\r\n\r\n  private canvas_mousedown(ev: React.MouseEvent) {\r\n    this.canvas = ev.target as HTMLCanvasElement;\r\n    this.paint = true;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.ctx.beginPath();\r\n    const coordinate = this.canvas.getBoundingClientRect();\r\n    const resultX = ev.clientX - coordinate.left - 2;\r\n    const resultY = ev.clientY - coordinate.top - 2;\r\n    this.ctx.moveTo(resultX, resultY);\r\n    this.ctx.lineWidth = 25;\r\n    this.ctx.strokeStyle = 'white';\r\n  }\r\n\r\n  private canvas_mousemove(ev: React.MouseEvent) {\r\n    if (this.paint) {\r\n      const coordinate = this.canvas.getBoundingClientRect();\r\n      const resultX = ev.clientX - coordinate.left - 2;\r\n      const resultY = ev.clientY - coordinate.top - 2;\r\n      this.ctx.lineTo(resultX, resultY);\r\n      this.ctx.stroke();\r\n    };\r\n  }\r\n\r\n  private canvas_mouseup() {\r\n    this.endDriving();\r\n  }\r\n\r\n  private canvas_mouseout() {\r\n    if (this.ctx) {\r\n      this.endDriving();\r\n    }\r\n  }\r\n\r\n  private endDriving() {\r\n    this.paint = false;\r\n    this.ctx.closePath();\r\n  }\r\n\r\n  private async sendCanvas(ev: React.MouseEvent) {\r\n    if (this.canvas) {\r\n      const button = ev.target as HTMLButtonElement;\r\n      button.disabled = true;\r\n      const blob = await new Promise<Blob>(resolve => this.canvas.toBlob(resolve, 'image/jpeg'));\r\n      const formData = new FormData();\r\n      formData.append('file', blob);\r\n      const out = {\r\n        file: blob,\r\n      }\r\n      const response = await fetch('/AINumber/DefineNumber', {\r\n        method: 'POST',\r\n        headers: {\r\n          //   'Content-Type': \"multipart/form-data\",\r\n          // \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        },\r\n        body: formData,\r\n      })\r\n        .finally(() => {\r\n          button.disabled = false;\r\n        });\r\n\r\n      this.setState({\r\n        numberResponse: await response.json(),\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PaintBoard from './Components/PaintBoard/PaintBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PaintBoard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}